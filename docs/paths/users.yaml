# Users endpoints would follow similar pattern
# This is a placeholder - full implementation would include all user management endpoints

users:
  get:
    tags:
      - Users
    summary: Get all users
    description: Get all users in the company with pagination
    operationId: getUsers
    security:
      - BearerAuth: []
    parameters:
      - $ref: '../components/index.yaml#/parameters/PageParam'
      - $ref: '../components/index.yaml#/parameters/LimitParam'
    responses:
      '200':
        description: Users retrieved successfully
        content:
          application/json:
            schema:
              allOf:
                - $ref: '../components/index.yaml#/schemas/SuccessResponse'
                - type: object
                  properties:
                    data:
                      type: object
                      properties:
                        users:
                          type: array
                          items:
                            $ref: '../components/index.yaml#/schemas/User'
                        pagination:
                          $ref: '../components/index.yaml#/schemas/PaginationMeta'
      '401':
        $ref: '../components/index.yaml#/responses/UnauthorizedError'
      '403':
        $ref: '../components/index.yaml#/responses/ForbiddenError'
      '500':
        $ref: '../components/index.yaml#/responses/InternalServerError'

  post:
    tags:
      - Users
    summary: Create user
    description: Create a new user in the company
    operationId: createUser
    security:
      - BearerAuth: []
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              firstName:
                type: string
                maxLength: 50
              lastName:
                type: string
                maxLength: 50
              email:
                type: string
                format: email
              role:
                type: string
                enum: [hr_manager, recruiter, interviewer, hiring_manager]
              department:
                type: string
              jobTitle:
                type: string
            required:
              - firstName
              - lastName
              - email
              - role
    responses:
      '201':
        description: User created successfully
        content:
          application/json:
            schema:
              allOf:
                - $ref: '../components/index.yaml#/schemas/SuccessResponse'
                - type: object
                  properties:
                    data:
                      $ref: '../components/index.yaml#/schemas/User'
      '401':
        $ref: '../components/index.yaml#/responses/UnauthorizedError'
      '403':
        $ref: '../components/index.yaml#/responses/ForbiddenError'
      '400':
        $ref: '../components/index.yaml#/responses/ValidationError'
      '500':
        $ref: '../components/index.yaml#/responses/InternalServerError'

# Additional endpoints would be defined here for:
# - search, by-role, user-by-id, update-role, activate, deactivate, activity, permissions
# Following the same pattern as above