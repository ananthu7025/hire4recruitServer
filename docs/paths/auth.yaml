register-company:
  post:
    tags:
      - Authentication
    summary: Register new company
    description: Register a new company with admin user and subscription plan
    operationId: registerCompany
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              companyName:
                type: string
                minLength: 2
                maxLength: 100
                example: "Tech Solutions Inc"
              domain:
                type: string
                pattern: '^[a-zA-Z0-9][a-zA-Z0-9-]{0,61}[a-zA-Z0-9](?:\.[a-zA-Z0-9][a-zA-Z0-9-]{0,61}[a-zA-Z0-9])*$'
                example: "techsolutions.com"
              industry:
                type: string
                example: "Technology"
              size:
                type: string
                enum: [startup, small, medium, large, enterprise]
                example: "medium"
              subscription:
                type: object
                properties:
                  plan:
                    type: string
                    enum: [basic, professional, enterprise]
                    example: "professional"
                  interval:
                    type: string
                    enum: [monthly, annual]
                    example: "annual"
                required:
                  - plan
                  - interval
              adminFirstName:
                type: string
                minLength: 2
                maxLength: 50
                example: "John"
              adminLastName:
                type: string
                minLength: 2
                maxLength: 50
                example: "Doe"
              adminEmail:
                type: string
                format: email
                example: "admin@techsolutions.com"
              adminPassword:
                type: string
                minLength: 8
                pattern: '^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])'
                example: "SecurePass123!"
              adminPhone:
                type: string
                example: "+1234567890"
              address:
                $ref: '../components/index.yaml#/schemas/Address'
              phone:
                type: string
                example: "+1234567890"
              website:
                type: string
                format: uri
                example: "https://techsolutions.com"
            required:
              - companyName
              - size
              - subscription
              - adminFirstName
              - adminLastName
              - adminEmail
              - adminPassword
    responses:
      '201':
        description: Company registration initiated
        content:
          application/json:
            schema:
              allOf:
                - $ref: '../components/index.yaml#/schemas/SuccessResponse'
                - type: object
                  properties:
                    data:
                      type: object
                      properties:
                        company:
                          type: object
                          properties:
                            id:
                              type: string
                            name:
                              type: string
                            subscription:
                              type: object
                              properties:
                                plan:
                                  type: string
                                status:
                                  type: string
                                pricing:
                                  $ref: '../components/index.yaml#/schemas/Pricing'
                        adminUser:
                          type: object
                          properties:
                            id:
                              type: string
                            email:
                              type: string
                            firstName:
                              type: string
                            lastName:
                              type: string
                            role:
                              type: string
                        payment:
                          $ref: '../components/index.yaml#/schemas/PaymentOrder'
                        subscriptionPlan:
                          $ref: '../components/index.yaml#/schemas/SubscriptionPlan'
      '409':
        $ref: '../components/index.yaml#/responses/ValidationError'
      '500':
        $ref: '../components/index.yaml#/responses/InternalServerError'

login:
  post:
    tags:
      - Authentication
    summary: User login
    description: Authenticate user and get access token
    operationId: login
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              email:
                type: string
                format: email
                example: "admin@techsolutions.com"
              password:
                type: string
                example: "SecurePass123!"
              rememberMe:
                type: boolean
                default: false
            required:
              - email
              - password
    responses:
      '200':
        description: Login successful
        content:
          application/json:
            schema:
              allOf:
                - $ref: '../components/index.yaml#/schemas/SuccessResponse'
                - type: object
                  properties:
                    data:
                      type: object
                      properties:
                        user:
                          $ref: '../components/index.yaml#/schemas/User'
                        company:
                          $ref: '../components/index.yaml#/schemas/Company'
                        token:
                          type: string
                          description: JWT access token
                        expiresIn:
                          type: string
                          example: "7d"
      '401':
        $ref: '../components/index.yaml#/responses/UnauthorizedError'
      '402':
        description: Payment required
        content:
          application/json:
            schema:
              $ref: '../components/index.yaml#/schemas/Error'
            examples:
              payment_pending:
                summary: Payment verification required
                value:
                  error: "Payment required"
                  message: "Payment verification required. Please complete your payment to access your account."
              subscription_suspended:
                summary: Subscription suspended
                value:
                  error: "Payment required"
                  message: "Subscription is suspended. Please contact support or update your payment method."
      '403':
        description: Email verification required
        content:
          application/json:
            schema:
              $ref: '../components/index.yaml#/schemas/Error'
            example:
              error: "Email verification required"
              message: "Email verification required. Please check your email and verify your account before logging in."
      '423':
        description: Account locked
        content:
          application/json:
            schema:
              $ref: '../components/index.yaml#/schemas/Error'
      '500':
        $ref: '../components/index.yaml#/responses/InternalServerError'

logout:
  post:
    tags:
      - Authentication
    summary: User logout
    description: Logout current user
    operationId: logout
    security:
      - BearerAuth: []
    responses:
      '200':
        description: Logout successful
        content:
          application/json:
            schema:
              $ref: '../components/index.yaml#/schemas/SuccessResponse'
      '401':
        $ref: '../components/index.yaml#/responses/UnauthorizedError'
      '500':
        $ref: '../components/index.yaml#/responses/InternalServerError'

profile:
  get:
    tags:
      - Authentication
    summary: Get user profile
    description: Get current authenticated user's profile
    operationId: getUserProfile
    security:
      - BearerAuth: []
    responses:
      '200':
        description: User profile retrieved successfully
        content:
          application/json:
            schema:
              allOf:
                - $ref: '../components/index.yaml#/schemas/SuccessResponse'
                - type: object
                  properties:
                    data:
                      type: object
                      properties:
                        user:
                          $ref: '../components/index.yaml#/schemas/User'
                        company:
                          type: object
                          properties:
                            id:
                              type: string
      '401':
        $ref: '../components/index.yaml#/responses/UnauthorizedError'
      '500':
        $ref: '../components/index.yaml#/responses/InternalServerError'

invite-employee:
  post:
    tags:
      - Authentication
    summary: Invite employee to company
    description: Send invitation to join company as an employee
    operationId: inviteEmployee
    security:
      - BearerAuth: []
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              email:
                type: string
                format: email
                example: "recruiter@techsolutions.com"
              firstName:
                type: string
                minLength: 2
                maxLength: 50
                example: "Jane"
              lastName:
                type: string
                minLength: 2
                maxLength: 50
                example: "Smith"
              roleId:
                type: string
                format: objectId
                example: "507f1f77bcf86cd799439011"
                description: Reference to Role document ID
              department:
                type: string
                example: "HR"
              jobTitle:
                type: string
                example: "Senior Recruiter"
              phone:
                type: string
                example: "+1234567891"
              employeeId:
                type: string
                example: "EMP-001"
                description: Internal employee ID
              expertise:
                type: array
                items:
                  type: string
                maxItems: 20
                description: Areas of expertise
                example: ["JavaScript", "React", "Node.js"]
              bio:
                type: string
                maxLength: 1000
                description: Employee biography
                example: "Experienced full-stack developer with expertise in modern web technologies"
            required:
              - email
              - firstName
              - lastName
              - roleId
    responses:
      '201':
        description: Employee invitation sent successfully
        content:
          application/json:
            schema:
              allOf:
                - $ref: '../components/index.yaml#/schemas/SuccessResponse'
                - type: object
                  properties:
                    data:
                      type: object
                      properties:
                        invitedEmployee:
                          type: object
                          properties:
                            id:
                              type: string
                            email:
                              type: string
                            firstName:
                              type: string
                            lastName:
                              type: string
                            role:
                              type: string
                            department:
                              type: string
                            jobTitle:
                              type: string
                            employeeId:
                              type: string
                            invitedAt:
                              type: string
                              format: date-time
                            invitedBy:
                              type: string
                              format: objectId
      '401':
        $ref: '../components/index.yaml#/responses/UnauthorizedError'
      '403':
        $ref: '../components/index.yaml#/responses/ForbiddenError'
      '409':
        $ref: '../components/index.yaml#/responses/ValidationError'
      '500':
        $ref: '../components/index.yaml#/responses/InternalServerError'

accept-invitation:
  post:
    tags:
      - Authentication
    summary: Accept user invitation
    description: Accept invitation and set password
    operationId: acceptInvitation
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              token:
                type: string
                description: Invitation token
              password:
                type: string
                minLength: 8
                pattern: '^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])'
              confirmPassword:
                type: string
            required:
              - token
              - password
              - confirmPassword
    responses:
      '200':
        description: Invitation accepted successfully
        content:
          application/json:
            schema:
              allOf:
                - $ref: '../components/index.yaml#/schemas/SuccessResponse'
                - type: object
                  properties:
                    data:
                      type: object
                      properties:
                        user:
                          $ref: '../components/index.yaml#/schemas/User'
                        company:
                          $ref: '../components/index.yaml#/schemas/Company'
                        token:
                          type: string
                        expiresIn:
                          type: string
      '400':
        $ref: '../components/index.yaml#/responses/ValidationError'
      '500':
        $ref: '../components/index.yaml#/responses/InternalServerError'

change-password:
  post:
    tags:
      - Authentication
    summary: Change password
    description: Change current user password
    operationId: changePassword
    security:
      - BearerAuth: []
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              currentPassword:
                type: string
              newPassword:
                type: string
                minLength: 8
                pattern: '^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])'
              confirmPassword:
                type: string
            required:
              - currentPassword
              - newPassword
              - confirmPassword
    responses:
      '200':
        description: Password changed successfully
        content:
          application/json:
            schema:
              $ref: '../components/index.yaml#/schemas/SuccessResponse'
      '400':
        $ref: '../components/index.yaml#/responses/ValidationError'
      '401':
        $ref: '../components/index.yaml#/responses/UnauthorizedError'
      '500':
        $ref: '../components/index.yaml#/responses/InternalServerError'

forgot-password:
  post:
    tags:
      - Authentication
    summary: Request password reset
    description: Request password reset email
    operationId: forgotPassword
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              email:
                type: string
                format: email
            required:
              - email
    responses:
      '200':
        description: Password reset email sent (if account exists)
        content:
          application/json:
            schema:
              $ref: '../components/index.yaml#/schemas/SuccessResponse'
      '500':
        $ref: '../components/index.yaml#/responses/InternalServerError'

reset-password:
  post:
    tags:
      - Authentication
    summary: Reset password
    description: Reset password using reset token
    operationId: resetPassword
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              token:
                type: string
                description: Password reset token
              password:
                type: string
                minLength: 8
                pattern: '^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])'
              confirmPassword:
                type: string
            required:
              - token
              - password
              - confirmPassword
    responses:
      '200':
        description: Password reset successful
        content:
          application/json:
            schema:
              $ref: '../components/index.yaml#/schemas/SuccessResponse'
      '400':
        $ref: '../components/index.yaml#/responses/ValidationError'
      '500':
        $ref: '../components/index.yaml#/responses/InternalServerError'

verify-token:
  get:
    tags:
      - Authentication
    summary: Verify authentication token
    description: Verify if authentication token is valid
    operationId: verifyToken
    security:
      - BearerAuth: []
    responses:
      '200':
        description: Token is valid
        content:
          application/json:
            schema:
              allOf:
                - $ref: '../components/index.yaml#/schemas/SuccessResponse'
                - type: object
                  properties:
                    data:
                      type: object
                      properties:
                        user:
                          type: object
                          properties:
                            id:
                              type: string
                            email:
                              type: string
                            role:
                              type: string
                            companyId:
                              type: string
      '401':
        $ref: '../components/index.yaml#/responses/UnauthorizedError'

permissions:
  get:
    tags:
      - Authentication
    summary: Get user permissions
    description: Get current user's permissions and role
    operationId: getUserPermissions
    security:
      - BearerAuth: []
    responses:
      '200':
        description: User permissions retrieved successfully
        content:
          application/json:
            schema:
              allOf:
                - $ref: '../components/index.yaml#/schemas/SuccessResponse'
                - type: object
                  properties:
                    data:
                      type: object
                      properties:
                        permissions:
                          $ref: '../components/index.yaml#/schemas/UserPermissions'
                        role:
                          type: string
      '401':
        $ref: '../components/index.yaml#/responses/UnauthorizedError'

subscription-plans:
  get:
    tags:
      - Authentication
    summary: Get subscription plans
    description: Get available subscription plans with pricing
    operationId: getSubscriptionPlans
    responses:
      '200':
        description: Subscription plans retrieved successfully
        content:
          application/json:
            schema:
              allOf:
                - $ref: '../components/index.yaml#/schemas/SuccessResponse'
                - type: object
                  properties:
                    data:
                      type: object
                      properties:
                        plans:
                          type: object
                          additionalProperties:
                            $ref: '../components/index.yaml#/schemas/SubscriptionPlan'
      '500':
        $ref: '../components/index.yaml#/responses/InternalServerError'

retry-payment:
  post:
    tags:
      - Authentication
    summary: Retry payment for pending subscription
    description: Create new payment order for companies with pending payment status
    operationId: retryPayment
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              email:
                type: string
                format: email
                description: Email address of the user whose company needs payment
                example: "admin@techsolutions.com"
            required:
              - email
    responses:
      '200':
        description: New payment order created successfully
        content:
          application/json:
            schema:
              allOf:
                - $ref: '../components/index.yaml#/schemas/SuccessResponse'
                - type: object
                  properties:
                    data:
                      type: object
                      properties:
                        company:
                          type: object
                          properties:
                            id:
                              type: string
                            name:
                              type: string
                            subscription:
                              type: object
                              properties:
                                plan:
                                  type: string
                                pricing:
                                  $ref: '../components/index.yaml#/schemas/Pricing'
                        payment:
                          $ref: '../components/index.yaml#/schemas/PaymentOrder'
                        subscriptionPlan:
                          $ref: '../components/index.yaml#/schemas/SubscriptionPlan'
      '400':
        description: Payment not required or invalid request
        content:
          application/json:
            schema:
              $ref: '../components/index.yaml#/schemas/Error'
            examples:
              payment_not_required:
                summary: Payment already completed
                value:
                  error: "Payment not required"
                  message: "Payment has already been completed or subscription is not pending"
      '404':
        description: User or company not found
        content:
          application/json:
            schema:
              $ref: '../components/index.yaml#/schemas/Error'
            examples:
              user_not_found:
                summary: User not found
                value:
                  error: "User not found"
                  message: "No account found with this email address"
              company_not_found:
                summary: Company not found
                value:
                  error: "Company not found"
                  message: "No company associated with this account"
      '500':
        $ref: '../components/index.yaml#/responses/InternalServerError'

verify-payment:
  post:
    tags:
      - Authentication
    summary: Verify payment and activate subscription
    description: Verify Razorpay payment and activate company subscription
    operationId: verifyPayment
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              razorpayOrderId:
                type: string
                description: Razorpay order ID
              razorpayPaymentId:
                type: string
                description: Razorpay payment ID
              razorpaySignature:
                type: string
                description: Razorpay signature for verification
              companyId:
                type: string
                description: Company ID to activate
            required:
              - razorpayOrderId
              - razorpayPaymentId
              - razorpaySignature
              - companyId
    responses:
      '200':
        description: Payment verified and subscription activated
        content:
          application/json:
            schema:
              allOf:
                - $ref: '../components/index.yaml#/schemas/SuccessResponse'
                - type: object
                  properties:
                    data:
                      type: object
                      properties:
                        company:
                          type: object
                          properties:
                            id:
                              type: string
                            name:
                              type: string
                            subscription:
                              $ref: '../components/index.yaml#/schemas/Subscription'
                        token:
                          type: string
                        expiresIn:
                          type: string
      '400':
        description: Payment verification failed
        content:
          application/json:
            schema:
              $ref: '../components/index.yaml#/schemas/Error'
      '404':
        $ref: '../components/index.yaml#/responses/NotFoundError'
      '500':
        $ref: '../components/index.yaml#/responses/InternalServerError'

verify-email:
  get:
    tags:
      - Authentication
    summary: Verify user email address
    description: Verify user email address using user ID from verification link
    operationId: verifyEmail
    parameters:
      - name: userId
        in: path
        required: true
        description: User ID to verify email for
        schema:
          type: string
          pattern: '^[0-9a-fA-F]{24}$'
          example: "507f1f77bcf86cd799439011"
    responses:
      '200':
        description: Email verified successfully
        content:
          application/json:
            schema:
              allOf:
                - $ref: '../components/index.yaml#/schemas/SuccessResponse'
                - type: object
                  properties:
                    message:
                      type: string
                      example: "Email verified successfully"
      '400':
        description: Bad request - Invalid user ID format or email already verified
        content:
          application/json:
            schema:
              $ref: '../components/index.yaml#/schemas/Error'
            examples:
              invalid_user_id:
                summary: Invalid user ID format
                value:
                  error: "Invalid request"
                  message: "Invalid user ID format"
              already_verified:
                summary: Email already verified
                value:
                  error: "Email already verified"
                  message: "Email is already verified"
      '404':
        description: User not found
        content:
          application/json:
            schema:
              $ref: '../components/index.yaml#/schemas/Error'
            example:
              error: "User not found"
              message: "User not found"
      '500':
        $ref: '../components/index.yaml#/responses/InternalServerError'