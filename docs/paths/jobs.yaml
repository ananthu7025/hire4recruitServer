# Jobs endpoints placeholder - full implementation would include all job management endpoints

jobs:
  get:
    tags:
      - Jobs
    summary: Get all jobs
    description: Get all jobs with filtering and pagination
    operationId: getJobs
    security:
      - BearerAuth: []
    parameters:
      - $ref: '../components/index.yaml#/parameters/PageParam'
      - $ref: '../components/index.yaml#/parameters/LimitParam'
      - name: status
        in: query
        description: Job status filter
        schema:
          type: string
          enum: [active, draft, closed, onhold]
      - name: department
        in: query
        description: Department filter
        schema:
          type: string
    responses:
      '200':
        description: Jobs retrieved successfully
        content:
          application/json:
            schema:
              allOf:
                - $ref: '../components/index.yaml#/schemas/SuccessResponse'
                - type: object
                  properties:
                    data:
                      type: object
                      properties:
                        jobs:
                          type: array
                          items:
                            $ref: '../components/index.yaml#/schemas/Job'
                        pagination:
                          $ref: '../components/index.yaml#/schemas/PaginationMeta'
      '401':
        $ref: '../components/index.yaml#/responses/UnauthorizedError'
      '403':
        $ref: '../components/index.yaml#/responses/ForbiddenError'
      '500':
        $ref: '../components/index.yaml#/responses/InternalServerError'

  post:
    tags:
      - Jobs
    summary: Create job
    description: Create a new job posting
    operationId: createJob
    security:
      - BearerAuth: []
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: '../components/index.yaml#/schemas/CreateJobRequest'
    responses:
      '201':
        description: Job created successfully
        content:
          application/json:
            schema:
              allOf:
                - $ref: '../components/index.yaml#/schemas/SuccessResponse'
                - type: object
                  properties:
                    data:
                      $ref: '../components/index.yaml#/schemas/Job'
      '401':
        $ref: '../components/index.yaml#/responses/UnauthorizedError'
      '403':
        $ref: '../components/index.yaml#/responses/ForbiddenError'
      '400':
        $ref: '../components/index.yaml#/responses/ValidationError'
      '500':
        $ref: '../components/index.yaml#/responses/InternalServerError'

job-by-id:
  get:
    tags:
      - Jobs
    summary: Get job by ID
    description: Get a specific job by its ID
    operationId: getJobById
    security:
      - BearerAuth: []
    parameters:
      - name: jobId
        in: path
        required: true
        description: Job ID
        schema:
          type: string
    responses:
      '200':
        description: Job retrieved successfully
        content:
          application/json:
            schema:
              allOf:
                - $ref: '../components/index.yaml#/schemas/SuccessResponse'
                - type: object
                  properties:
                    data:
                      $ref: '../components/index.yaml#/schemas/Job'
      '401':
        $ref: '../components/index.yaml#/responses/UnauthorizedError'
      '403':
        $ref: '../components/index.yaml#/responses/ForbiddenError'
      '404':
        $ref: '../components/index.yaml#/responses/NotFoundError'
      '500':
        $ref: '../components/index.yaml#/responses/InternalServerError'

  put:
    tags:
      - Jobs
    summary: Update job
    description: Update an existing job
    operationId: updateJob
    security:
      - BearerAuth: []
    parameters:
      - name: jobId
        in: path
        required: true
        description: Job ID
        schema:
          type: string
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: '../components/index.yaml#/schemas/UpdateJobRequest'
    responses:
      '200':
        description: Job updated successfully
        content:
          application/json:
            schema:
              allOf:
                - $ref: '../components/index.yaml#/schemas/SuccessResponse'
                - type: object
                  properties:
                    data:
                      $ref: '../components/index.yaml#/schemas/Job'
      '401':
        $ref: '../components/index.yaml#/responses/UnauthorizedError'
      '403':
        $ref: '../components/index.yaml#/responses/ForbiddenError'
      '404':
        $ref: '../components/index.yaml#/responses/NotFoundError'
      '400':
        $ref: '../components/index.yaml#/responses/ValidationError'
      '500':
        $ref: '../components/index.yaml#/responses/InternalServerError'

  delete:
    tags:
      - Jobs
    summary: Delete job
    description: Delete a job by its ID
    operationId: deleteJob
    security:
      - BearerAuth: []
    parameters:
      - name: jobId
        in: path
        required: true
        description: Job ID
        schema:
          type: string
    responses:
      '200':
        description: Job deleted successfully
        content:
          application/json:
            schema:
              $ref: '../components/index.yaml#/schemas/SuccessResponse'
      '401':
        $ref: '../components/index.yaml#/responses/UnauthorizedError'
      '403':
        $ref: '../components/index.yaml#/responses/ForbiddenError'
      '404':
        $ref: '../components/index.yaml#/responses/NotFoundError'
      '500':
        $ref: '../components/index.yaml#/responses/InternalServerError'

# Additional endpoints would be defined here for:
# - search-by-skills, stats, publish, clone, analytics, applications
# Following the same pattern as above