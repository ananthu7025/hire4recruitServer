# Jobs endpoints placeholder - full implementation would include all job management endpoints

jobs:
  get:
    tags:
      - Jobs
    summary: Get all jobs
    description: Get all jobs with filtering and pagination
    operationId: getJobs
    security:
      - BearerAuth: []
    parameters:
      - $ref: '../components/index.yaml#/parameters/PageParam'
      - $ref: '../components/index.yaml#/parameters/LimitParam'
      - name: status
        in: query
        description: Job status filter
        schema:
          type: string
          enum: [draft, active, paused, closed]
      - name: department
        in: query
        description: Department filter
        schema:
          type: string
    responses:
      '200':
        description: Jobs retrieved successfully
        content:
          application/json:
            schema:
              allOf:
                - $ref: '../components/index.yaml#/schemas/SuccessResponse'
                - type: object
                  properties:
                    data:
                      type: object
                      properties:
                        jobs:
                          type: array
                          items:
                            $ref: '../components/index.yaml#/schemas/Job'
                        pagination:
                          $ref: '../components/index.yaml#/schemas/PaginationMeta'
      '401':
        $ref: '../components/index.yaml#/responses/UnauthorizedError'
      '403':
        $ref: '../components/index.yaml#/responses/ForbiddenError'
      '500':
        $ref: '../components/index.yaml#/responses/InternalServerError'

  post:
    tags:
      - Jobs
    summary: Create job
    description: Create a new job posting
    operationId: createJob
    security:
      - BearerAuth: []
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              title:
                type: string
                maxLength: 200
              description:
                type: string
              department:
                type: string
              location:
                $ref: '../components/index.yaml#/schemas/JobLocation'
              employment:
                $ref: '../components/index.yaml#/schemas/Employment'
              salary:
                $ref: '../components/index.yaml#/schemas/Salary'
              requirements:
                $ref: '../components/index.yaml#/schemas/JobRequirements'
              benefits:
                type: array
                items:
                  type: string
              urgency:
                type: string
                enum: [low, medium, high]
                default: medium
            required:
              - title
              - description
              - department
              - location
              - employment
    responses:
      '201':
        description: Job created successfully
        content:
          application/json:
            schema:
              allOf:
                - $ref: '../components/index.yaml#/schemas/SuccessResponse'
                - type: object
                  properties:
                    data:
                      $ref: '../components/index.yaml#/schemas/Job'
      '401':
        $ref: '../components/index.yaml#/responses/UnauthorizedError'
      '403':
        $ref: '../components/index.yaml#/responses/ForbiddenError'
      '400':
        $ref: '../components/index.yaml#/responses/ValidationError'
      '500':
        $ref: '../components/index.yaml#/responses/InternalServerError'

# Additional endpoints would be defined here for:
# - search-by-skills, stats, job-by-id, publish, clone, analytics, applications
# Following the same pattern as above